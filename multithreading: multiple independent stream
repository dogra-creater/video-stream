import cv2
import threading
import time
from urllib.parse import quote_plus

FRAME_WIDTH, FRAME_HEIGHT = 640, 360

class ThreadedIPCam:
    def __init__(self, url, reconnect_delay=5):
        self.url = url
        self.reconnect_delay = reconnect_delay
        self.capture = None
        self.stopped = True
        self.frame = None
        self.lock = threading.Lock()

    def start(self):
        self.stopped = False
        threading.Thread(target=self._update, daemon=True).start()
        return self

    def _update(self):
        while not self.stopped:
            if self.capture is None:
                cap = cv2.VideoCapture(self.url)
                if not cap.isOpened():
                    print(f"[WARN] Cannot open {self.url}, retrying in {self.reconnect_delay}s")
                    time.sleep(self.reconnect_delay)
                    continue
                self.capture = cap

            ret, frame = self.capture.read()
            if not ret or frame is None:
                print(f"[WARN] Lost stream for {self.url}, reconnecting...")
                try:
                    self.capture.release()
                except Exception:
                    pass
                self.capture = None
                time.sleep(self.reconnect_delay)
                continue

            # resize to fixed size to save CPU/GPU
            frame = cv2.resize(frame, (FRAME_WIDTH, FRAME_HEIGHT))
            with self.lock:
                self.frame = frame
            time.sleep(0.002)

    def read(self):
        with self.lock:
            return None if self.frame is None else self.frame.copy()

    def stop(self):
        self.stopped = True
        try:
            if self.capture:
                self.capture.release()
        except Exception:
            pass


def make_rtsp_url(ip, username, password, port=554, path="stream1"):
    # Use quote_plus to escape special chars in username/password
    u = quote_plus(username)
    p = quote_plus(password)
    return f"rtsp://{u}:{p}@{ip}:{port}/{path}"


if __name__ == "__main__":
    # Example: credentials for three cameras (edit to your actual values)
    cam_credentials = [
        {"ip": "192.168.31.68", "user": "admin", "pass": "Mypassword@25"},
        {"ip": "192.168.31.68", "user": "admin", "pass": "Mypassword@25"},
        {"ip": "192.168.31.68", "user": "admin", "pass": "Mypassword@25"},
    ]

    cam_threads = []
    for i, cam in enumerate(cam_credentials):
        url = make_rtsp_url(cam["ip"], cam["user"], cam["pass"], path="stream1")
        print(f"Camera {i+1} URL: {url}")   # for debugging; remove in production
        tcam = ThreadedIPCam(url).start()
        cam_threads.append(tcam)

    try:
        while True:
            for idx, tcam in enumerate(cam_threads):
                frame = tcam.read()
                if frame is not None:
                    cv2.imshow(f"Camera {idx+1}", frame)
            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                break
    except KeyboardInterrupt:
        pass
    finally:
        for t in cam_threads:
            t.stop()
        cv2.destroyAllWindows()
