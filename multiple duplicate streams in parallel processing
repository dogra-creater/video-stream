import cv2
import time
import threading
import numpy as np
from datetime import datetime
from urllib.parse import quote_plus
from ultralytics import YOLO   # pip install ultralytics

# ==========================
# CONFIGURATION
# ==========================
CAM_IP = "192.168.31.68"
USERNAME = "admin"
PASSWORD = "Mypassword@25"
FRAME_WIDTH = 640
FRAME_HEIGHT = 360

# ==========================
# BUILD CAMERA URL
# ==========================
def build_rtsp_urls(ip, user, password):
    u = quote_plus(user)
    p = quote_plus(password)
    return [
        f"rtsp://{u}:{p}@{ip}:554/Streaming/Channels/101",
        f"rtsp://{u}:{p}@{ip}:554/stream1",
        f"http://{u}:{p}@{ip}:8080/video",
    ]

# ==========================
# THREADED CAMERA CLASS
# ==========================
class ThreadedIPCam:
    def __init__(self, url_candidates, reconnect_delay=5):
        self.url_candidates = url_candidates
        self.reconnect_delay = reconnect_delay
        self.capture = None
        self.stopped = True
        self.frame = None
        self.lock = threading.Lock()

    def _connect(self):
        for url in self.url_candidates:
            cap = cv2.VideoCapture(url)
            if cap.isOpened():
                print(f"[{datetime.now()}] Connected: {url}")
                return cap
        return None

    def start(self):
        self.stopped = False
        threading.Thread(target=self._update, daemon=True).start()
        return self

    def _update(self):
        while not self.stopped:
            if self.capture is None:
                self.capture = self._connect()
                if self.capture is None:
                    time.sleep(self.reconnect_delay)
                    continue
            ret, frame = self.capture.read()
            if not ret:
                self.capture.release()
                self.capture = None
                continue
            # Resize frame here
            frame = cv2.resize(frame, (FRAME_WIDTH, FRAME_HEIGHT))
            with self.lock:
                self.frame = frame
            time.sleep(0.001)

    def read(self):
        with self.lock:
            return None if self.frame is None else self.frame.copy()

    def stop(self):
        self.stopped = True
        if self.capture:
            self.capture.release()

# ==========================
# MAIN LOOP WITH MULTIPLE VIEWS
# ==========================
urls = build_rtsp_urls(CAM_IP, USERNAME, PASSWORD)
stream = ThreadedIPCam(urls).start()
time.sleep(1.0)

# Load YOLOv8 model (pretrained COCO)
model = YOLO("yolov8n.pt")   # or yolov8s.pt for better accuracy

try:
    while True:
        frame = stream.read()
        if frame is None:
            time.sleep(0.1)
            continue

        # View 1: Raw feed
        cv2.imshow("Raw Feed", frame)

        # View 2: Grayscale
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        cv2.imshow("Grayscale Feed", gray)

        # View 3: Human Detection using YOLO
        results = model(frame, classes=[0])  # class 0 = person
        annotated = results[0].plot()
        cv2.imshow("Human Detection", annotated)

        # Exit on 'q'
        if cv2.waitKey(1) & 0xFF == ord("q"):
            break

except KeyboardInterrupt:
    print("Stopped by user.")

finally:
    stream.stop()
    cv2.destroyAllWindows()
